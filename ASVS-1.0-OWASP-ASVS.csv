Section,Name,Item,Description
V3,Session,3.1.1,Verify the application never reveals session tokens in URL parameters or error messages.
V3,Session,3.2.1,Verify the application generates a new session token on user authentication. ([C6](https://www.owasp.org/index.php/OWASP_Proactive_Controls#tab=Formal_Numbering))
V3,Session,3.2.2,Verify that session tokens possess at least 64 bits of entropy. ([C6](https://www.owasp.org/index.php/OWASP_Proactive_Controls#tab=Formal_Numbering))
V3,Session,3.2.3,Verify the application only stores session tokens in the browser using secure methods such as appropriately secured cookies (see section 3.4) or HTML 5 session storage.
V3,Session,3.2.4,Verify that session token are generated using approved cryptographic algorithms. ([C6](https://www.owasp.org/index.php/OWASP_Proactive_Controls#tab=Formal_Numbering))
V3,Session,3.3.1,Verify that logout and expiration invalidate the session token; such that the back button or a downstream relying party does not resume an authenticated session; including across relying parties. ([C6](https://www.owasp.org/index.php/OWASP_Proactive_Controls#tab=Formal_Numbering))
V3,Session,3.3.3,Verify that the application terminates all other active sessions after a successful password change; and that this is effective across the application; federated login (if present); and any relying parties.
V3,Session,3.3.4,Verify that users are able to view and log out of any or all currently active sessions and devices.
V3,Session,3.4.1,Verify that cookie-based session tokens have the 'Secure' attribute set. ([C6](https://www.owasp.org/index.php/OWASP_Proactive_Controls#tab=Formal_Numbering))
V3,Session,3.4.2,Verify that cookie-based session tokens have the 'HttpOnly' attribute set. ([C6](https://www.owasp.org/index.php/OWASP_Proactive_Controls#tab=Formal_Numbering))
V3,Session,3.4.3,Verify that cookie-based session tokens utilize the 'SameSite' attribute to limit exposure to cross-site request forgery attacks. ([C6](https://www.owasp.org/index.php/OWASP_Proactive_Controls#tab=Formal_Numbering))
V3,Session,3.4.5,Verify that if the application is published under a domain name with other applications that set or use session cookies that might override or disclose the session cookies; set the path attribute in cookie-based session tokens using the most precise path possible. ([C6](https://www.owasp.org/index.php/OWASP_Proactive_Controls#tab=Formal_Numbering))
V3,Session,3.5.1,Verify the application does not treat OAuth and refresh tokens &mdash; on their own &mdash; as the presence of the subscriber and allows users to terminate trust relationships with linked applications.
V3,Session,3.5.2,Verify the application uses session tokens rather than static API secrets and keys; except with legacy implementations.
V3,Session,3.5.3,Verify that stateless session tokens use digital signatures; encryption; and other countermeasures to protect against tampering; enveloping; replay; null cipher; and key substitution attacks.
V3,Session,3.7.1,Verify the application ensures a valid login session or requires re-authentication or secondary verification before allowing any sensitive transactions or account modifications.
V4,Access,4.1.1,Verify that the application enforces access control rules on a trusted service layer; especially if client-side access control is present and could be bypassed.
V4,Access,4.1.2,Verify that all user and data attributes and policy information used by access controls cannot be manipulated by end users unless specifically authorized.
V4,Access,4.1.3,Verify that the principle of least privilege exists - users should only be able to access functions; data files; URLs; controllers; services; and other resources; for which they possess specific authorization. This implies protection against spoofing and elevation of privilege. ([C7](https://www.owasp.org/index.php/OWASP_Proactive_Controls#tab=Formal_Numbering))
V4,Access,4.1.4,Verify that the principle of deny by default exists whereby new users/roles start with minimal or no permissions and users/roles do not receive access to new features until access is explicitly assigned.  ([C7](https://www.owasp.org/index.php/OWASP_Proactive_Controls#tab=Formal_Numbering))
V4,Access,4.1.5,Verify that access controls fail securely including when an exception occurs. ([C10](https://www.owasp.org/index.php/OWASP_Proactive_Controls#tab=Formal_Numbering))
V4,Access,4.2.1,Verify that sensitive data and APIs are protected against direct object attacks targeting creation; reading; updating and deletion of records; such as creating or updating someone else's record; viewing everyone's records; or deleting all records.
V4,Access,4.2.2,Verify that the application or framework enforces a strong anti-CSRF mechanism to protect authenticated functionality; and effective anti-automation or anti-CSRF protects unauthenticated functionality.
V4,Access,4.3.1,Verify administrative interfaces use appropriate multi-factor authentication to prevent unauthorized use.
V4,Access,4.3.2,Verify that directory browsing is disabled unless deliberately desired. Additionally; applications should not allow discovery or disclosure of file or directory metadata; such as Thumbs.db; .DS_Store; .git or .svn folders.
V5,Validation,5.1.1,Verify that the application has defenses against HTTP parameter pollution attacks; particularly if the application framework makes no distinction about the source of request parameters (GET; POST; cookies; headers; or environment variables).
V5,Validation,5.1.2,Verify that frameworks protect against mass parameter assignment attacks; or that the application has countermeasures to protect against unsafe parameter assignment; such as marking fields private or similar. ([C5](https://www.owasp.org/index.php/OWASP_Proactive_Controls#tab=Formal_Numbering))
V5,Validation,5.1.3,Verify that all input (HTML form fields; REST requests; URL parameters; HTTP headers; cookies; batch files; RSS feeds; etc) is validated using positive validation (whitelisting). ([C5](https://www.owasp.org/index.php/OWASP_Proactive_Controls#tab=Formal_Numbering))
V5,Validation,5.1.4,Verify that structured data is strongly typed and validated against a defined schema including allowed characters; length and pattern (e.g. credit card numbers or telephone; or validating that two related fields are reasonable; such as checking that suburb and zip/postcode match). ([C5](https://www.owasp.org/index.php/OWASP_Proactive_Controls#tab=Formal_Numbering))
V5,Validation,5.1.5,Verify that URL redirects and forwards only allow whitelisted destinations; or show a warning when redirecting to potentially untrusted content.
V5,Validation,5.2.1,Verify that all untrusted HTML input from WYSIWYG editors or similar is properly sanitized with an HTML sanitizer library or framework feature. ([C5](https://www.owasp.org/index.php/OWASP_Proactive_Controls#tab=Formal_Numbering))
V5,Validation,5.2.2,Verify that unstructured data is sanitized to enforce safety measures such as allowed characters and length.
V5,Validation,5.2.4,Verify that the application avoids the use of eval() or other dynamic code execution features. Where there is no alternative; any user input being included must be sanitized or sandboxed before being executed.
V5,Validation,5.2.5,Verify that the application protects against template injection attacks by ensuring that any user input being included is sanitized or sandboxed.
V5,Validation,5.2.6,Verify that the application protects against SSRF attacks; by validating or sanitizing untrusted data or HTTP file metadata; such as filenames and URL input fields; use whitelisting of protocols; domains; paths and ports.
V5,Validation,5.2.7,Verify that the application sanitizes; disables; or sandboxes user-supplied SVG scriptable content; especially as they relate to XSS resulting from inline scripts; and foreignObject.
V5,Validation,5.2.8,Verify that the application sanitizes; disables; or sandboxes user-supplied scriptable or expression template language content; such as Markdown; CSS or XSL stylesheets; BBCode; or similar.
V5,Validation,5.3.1,Verify that output encoding is relevant for the interpreter and context required. For example; use encoders specifically for HTML values; HTML attributes; JavaScript; URL Parameters; HTTP headers; SMTP; and others as the context requires; especially from untrusted inputs (e.g. names with Unicode or apostrophes; such as ねこ or O'Hara). ([C4](https://www.owasp.org/index.php/OWASP_Proactive_Controls#tab=Formal_Numbering))
V5,Validation,5.3.10,Verify that the application protects against XPath injection or XML injection attacks. ([C4](https://www.owasp.org/index.php/OWASP_Proactive_Controls#tab=Formal_Numbering))
V5,Validation,5.3.2,Verify that output encoding preserves the user's chosen character set and locale; such that any Unicode character point is valid and safely handled. ([C4](https://www.owasp.org/index.php/OWASP_Proactive_Controls#tab=Formal_Numbering))
V5,Validation,5.3.3,Verify that context-aware; preferably automated - or at worst; manual - output escaping protects against reflected; stored; and DOM based XSS. ([C4](https://www.owasp.org/index.php/OWASP_Proactive_Controls#tab=Formal_Numbering))
V5,Validation,5.3.4,Verify that data selection or database queries (e.g. SQL; HQL; ORM; NoSQL) use parameterized queries; ORMs; entity frameworks; or are otherwise protected from database injection attacks. ([C3](https://www.owasp.org/index.php/OWASP_Proactive_Controls#tab=Formal_Numbering))
V5,Validation,5.3.5,Verify that where parameterized or safer mechanisms are not present; context-specific output encoding is used to protect against injection attacks; such as the use of SQL escaping to protect against SQL injection. ([C3; C4](https://www.owasp.org/index.php/OWASP_Proactive_Controls#tab=Formal_Numbering))
V5,Validation,5.3.6,Verify that the application projects against JavaScript or JSON injection attacks; including for eval attacks; remote JavaScript includes; CSP bypasses; DOM XSS; and JavaScript expression evaluation. ([C4](https://www.owasp.org/index.php/OWASP_Proactive_Controls#tab=Formal_Numbering))
V5,Validation,5.3.7,Verify that the application protects against LDAP Injection vulnerabilities; or that specific security controls to prevent LDAP Injection have been implemented. ([C4](https://www.owasp.org/index.php/OWASP_Proactive_Controls#tab=Formal_Numbering))
V5,Validation,5.3.8,Verify that the application protects against OS command injection and that operating system calls use parameterized OS queries or use contextual command line output encoding. ([C4](https://www.owasp.org/index.php/OWASP_Proactive_Controls#tab=Formal_Numbering))
V5,Validation,5.3.9,Verify that the application protects against Local File Inclusion (LFI) or Remote File Inclusion (RFI) attacks.
V5,Validation,5.4.3,Verify that sign; range; and input validation techniques are used to prevent integer overflows.
V5,Validation,5.5.1,Verify that serialized objects use integrity checks or are encrypted to prevent hostile object creation or data tampering. ([C5](https://www.owasp.org/index.php/OWASP_Proactive_Controls#tab=Formal_Numbering))
V5,Validation,5.5.2,Verify that the application correctly restricts XML parsers to only use the most restrictive configuration possible and to ensure that unsafe features such as resolving external entities are disabled to prevent XXE.
V5,Validation,5.5.3,Verify that deserialization of untrusted data is avoided or is protected in both custom code and third-party libraries (such as JSON; XML and YAML parsers).
V5,Validation,5.5.4,Verify that when parsing JSON in browsers or JavaScript-based backends; JSON.parse is used to parse the JSON document. Do not use eval() to parse JSON.
V6,Cryptography,6.1.1,Verify that regulated private data is stored encrypted while at rest; such as personally identifiable information (PII); sensitive personal information; or data assessed likely to be subject to EU's GDPR.
V6,Cryptography,6.1.3,Verify that regulated financial data is stored encrypted while at rest; such as financial accounts; defaults or credit history; tax records; pay history; beneficiaries; or de-anonymized market or research records.
V6,Cryptography,6.4.1,Verify that a secrets management solution such as a key vault is used to securely create; store; control access to and destroy secrets. ([C8](https://www.owasp.org/index.php/OWASP_Proactive_Controls#tab=Formal_Numbering))
V6,Cryptography,6.4.2,Verify that key material is not exposed to the application but instead uses an isolated security module like a vault for cryptographic operations. ([C8](https://www.owasp.org/index.php/OWASP_Proactive_Controls#tab=Formal_Numbering))
V7,Error,7.1.1,Verify that the application does not log credentials or payment details. Session tokens should only be stored in logs in an irreversible; hashed form. ([C9; C10](https://www.owasp.org/index.php/OWASP_Proactive_Controls#tab=Formal_Numbering))
V7,Error,7.1.2,Verify that the application does not log other sensitive data as defined under local privacy laws or relevant security policy. ([C9](https://www.owasp.org/index.php/OWASP_Proactive_Controls#tab=Formal_Numbering))
V7,Error,7.1.3,Verify that the application logs security relevant events including successful and failed authentication events; access control failures; deserialization failures and input validation failures. ([C5; C7](https://www.owasp.org/index.php/OWASP_Proactive_Controls#tab=Formal_Numbering))
V7,Error,7.1.4,Verify that each log event includes necessary information that would allow for a detailed investigation of the timeline when an event happens. ([C9](https://www.owasp.org/index.php/OWASP_Proactive_Controls#tab=Formal_Numbering))
V7,Error,7.2.1,Verify that all authentication decisions are logged; without storing sensitive session identifiers or passwords. This should include requests with relevant metadata needed for security investigations.
V7,Error,7.2.2,Verify that all access control decisions can be logged and all failed decisions are logged. This should include requests with relevant metadata needed for security investigations.
V7,Error,7.4.1,Verify that a generic message is shown when an unexpected or security sensitive error occurs; potentially with a unique ID which support personnel can use to investigate.  ([C10](https://www.owasp.org/index.php/OWASP_Proactive_Controls#tab=Formal_Numbering))
V7,Error,7.4.2,Verify that exception handling (or a functional equivalent) is used across the codebase to account for expected and unexpected error conditions. ([C10](https://www.owasp.org/index.php/OWASP_Proactive_Controls#tab=Formal_Numbering))
V7,Error,7.4.3,"Verify that a ""last resort"" error handler is defined which will catch all unhandled exceptions. ([C10](https://www.owasp.org/index.php/OWASP_Proactive_Controls#tab=Formal_Numbering))"
V8,Data,8.2.1,Verify the application sets sufficient anti-caching headers so that sensitive data is not cached in modern browsers.
V8,Data,8.2.2,Verify that data stored in client side storage (such as HTML5 local storage; session storage; IndexedDB; regular cookies or Flash cookies) does not contain sensitive data or PII.
V8,Data,8.2.3,Verify that authenticated data is cleared from client storage; such as the browser DOM; after the client or session is terminated.
V8,Data,8.3.1,Verify that sensitive data is sent to the server in the HTTP message body or headers; and that query string parameters from any HTTP verb do not contain sensitive data.
V8,Data,8.3.2,Verify that users have a method to remove or export their data on demand.
V8,Data,8.3.3,Verify that users are provided clear language regarding collection and use of supplied personal information and that users have provided opt-in consent for the use of that data before it is used in any way.
V8,Data,8.3.4,Verify that all sensitive data created and processed by the application has been identified; and ensure that a policy is in place on how to deal with sensitive data. ([C8](https://www.owasp.org/index.php/OWASP_Proactive_Controls#tab=Formal_Numbering))
V8,Data,8.3.5,Verify accessing sensitive data is audited (without logging the sensitive data itself); if the data is collected under relevant data protection directives or where logging of access is required.
V8,Data,8.3.6,Verify that sensitive information contained in memory is overwritten as soon as it is no longer required to mitigate memory dumping attacks; using zeroes or random data.
V8,Data,8.3.7,Verify that sensitive or private information that is required to be encrypted; is encrypted using approved algorithms that provide both confidentiality and integrity. ([C8](https://www.owasp.org/index.php/OWASP_Proactive_Controls#tab=Formal_Numbering))
V8,Data,8.3.8,Verify that sensitive personal information is subject to data retention classification; such that old or out of date data is deleted automatically; on a schedule; or as the situation requires.
V9,Communications,9.1.1,Verify that secured TLS is used for all client connectivity; and does not fall back to insecure or unencrypted protocols. ([C8](https://www.owasp.org/index.php/OWASP_Proactive_Controls#tab=Formal_Numbering))
V9,Communications,9.1.2,Verify using online or up to date TLS testing tools that only strong algorithms; ciphers; and protocols are enabled; with the strongest algorithms and ciphers set as preferred.
V9,Communications,9.1.3,Verify that old versions of SSL and TLS protocols; algorithms; ciphers; and configuration are disabled; such as SSLv2; SSLv3; or TLS 1.0 and TLS 1.1. The latest version of TLS should be the preferred cipher suite.
V9,Communications,9.2.1,Verify that connections to and from the server use trusted TLS certificates. Where internally generated or self-signed certificates are used; the server must be configured to only trust specific internal CAs and specific self-signed certificates. All others should be rejected.
V9,Communications,9.2.2,Verify that encrypted communications such as TLS is used for all inbound and outbound connections; including for management ports; monitoring; authentication; API; or web service calls; database; cloud; serverless; mainframe; external; and partner connections. The server must not fall back to insecure or unencrypted protocols.
V10,Malicious,10.2.1,Verify that the application source code and third party libraries do not contain unauthorized phone home or data collection capabilities. Where such functionality exists; obtain the user's permission for it to operate  before collecting any data.
V10,Malicious,10.2.2,Verify that the application does not ask for unnecessary or excessive permissions to privacy related features or sensors; such as contacts; cameras; microphones; or location.
V10,Malicious,10.2.3,Verify that the application source code and third party libraries do not contain back doors; such as hard-coded or additional undocumented accounts or keys; code obfuscation; undocumented binary blobs; rootkits; or anti-debugging; insecure debugging features; or otherwise out of date; insecure; or hidden functionality that could be used maliciously if discovered.
V10,Malicious,10.2.4,Verify that the application source code and third party libraries does not contain time bombs by searching for date and time related functions.
V10,Malicious,10.2.5,Verify that the application source code and third party libraries does not contain malicious code; such as salami attacks; logic bypasses; or logic bombs.
V10,Malicious,10.2.6,Verify that the application source code and third party libraries do not contain Easter eggs or any other potentially unwanted functionality.
V10,Malicious,10.3.1,Verify that if the application has a client or server auto-update feature; updates should be obtained over secure channels and digitally signed. The update code must validate the digital signature of the update before installing or executing the update.
V10,Malicious,10.3.2,Verify that the application employs integrity protections; such as code signing or sub-resource integrity. The application must not load or execute code from untrusted sources; such as loading includes; modules; plugins; code; or libraries from untrusted sources or the Internet.
V10,Malicious,10.3.3,Verify that the application has protection from sub-domain takeovers if the application relies upon DNS entries or DNS sub-domains; such as expired domain names; out of date DNS pointers or CNAMEs; expired projects at public source code repos; or transient cloud APIs; serverless functions; or storage buckets (autogen-bucket-id.cloud.example.com) or similar. Protections can include ensuring that DNS names used by applications are regularly checked for expiry or change.
V11,BusLogic,11.1.1,Verify the application will only process business logic flows for the same user in sequential step order and without skipping steps.
V11,BusLogic,11.1.2,Verify the application will only process business logic flows with all steps being processed in realistic human time; i.e. transactions are not submitted too quickly.
V11,BusLogic,11.1.3,Verify the application has appropriate limits for specific business actions or transactions which are correctly enforced on a per user basis.
V11,BusLogic,11.1.4,Verify the application has sufficient anti-automation controls to detect and protect against data exfiltration; excessive business logic requests; excessive file uploads or denial of service attacks.
V11,BusLogic,11.1.5,Verify the application has business logic limits or validation to protect against likely business risks or threats; identified using threat modelling or similar methodologies.
V11,BusLogic,11.1.6,"Verify the application does not suffer from ""time of check to time of use"" (TOCTOU) issues or other race conditions for sensitive operations."
V11,BusLogic,11.1.7,Verify the application monitors for unusual events or activity from a business logic perspective. For example; attempts to perform actions out of order or actions which a normal user would never attempt. ([C9](https://www.owasp.org/index.php/OWASP_Proactive_Controls#tab=Formal_Numbering))
V11,BusLogic,11.1.8,Verify the application has configurable alerting when automated attacks or unusual activity is detected.
V12,Files,12.1.1,Verify that the application will not accept large files that could fill up storage or cause a denial of service attack.
V12,Files,12.1.2,"Verify that compressed files are checked for ""zip bombs"" - small input files that will decompress into huge files thus exhausting file storage limits."
V12,Files,12.1.3,Verify that a file size quota and maximum number of files per user is enforced to ensure that a single user cannot fill up the storage with too many files; or excessively large files.
V12,Files,12.2.1,Verify that files obtained from untrusted sources are validated to be of expected type based on the file's content.
V12,Files,12.3.1,Verify that user-submitted filename metadata is not used directly with system or framework file and URL API to protect against path traversal.
V12,Files,12.3.2,Verify that user-submitted filename metadata is validated or ignored to prevent the disclosure; creation; updating or removal of local files (LFI).
V12,Files,12.3.3,Verify that user-submitted filename metadata is validated or ignored to prevent the disclosure or execution of remote files (RFI); which may also lead to SSRF.
V12,Files,12.3.4,Verify that the application protects against reflective file download (RFD) by validating or ignoring user-submitted filenames in a JSON; JSONP; or URL parameter; the response Content-Type header should be set to text/plain; and the Content-Disposition header should have a fixed filename.
V12,Files,12.3.5,Verify that untrusted file metadata is not used directly with system API or libraries; to protect against OS command injection.
V12,Files,12.3.6,Verify that the application does not include and execute functionality from untrusted sources; such as unverified content distribution networks; JavaScript libraries; node npm libraries; or server-side DLLs.
V12,Files,12.4.1,Verify that files obtained from untrusted sources are stored outside the web root; with limited permissions; preferably with strong validation.
V12,Files,12.4.2,Verify that files obtained from untrusted sources are scanned by antivirus scanners to prevent upload of known malicious content.
V12,Files,12.5.1,Verify that the web tier is configured to serve only files with specific file extensions to prevent unintentional information and source code leakage. For example; backup files (e.g. .bak); temporary working files (e.g. .swp); compressed files (.zip; .tar.gz; etc) and other extensions commonly used by editors should be blocked unless required.
V12,Files,12.5.2,Verify that direct requests to uploaded files will never be executed as HTML/JavaScript content.
V12,Files,12.6.1,Verify that the web or application server is configured with a whitelist of resources or systems to which the server can send requests or load data/files from.
V13,API,13.1.1,Verify that all application components use the same encodings and parsers to avoid parsing attacks that exploit different URI or file parsing behavior that could be used in SSRF and RFI attacks.
V13,API,13.1.2,Verify that access to administration and management functions is limited to authorized administrators.
V13,API,13.1.3,Verify API URLs do not expose sensitive information; such as the API key; session tokens etc.
V13,API,13.1.4,Verify that authorization decisions are made at both the URI; enforced by programmatic or declarative security at the controller or router; and at the resource level; enforced by model-based permissions.
V13,API,13.1.5,Verify that requests containing unexpected or missing content types are rejected with appropriate headers (HTTP response status 406 Unacceptable or 415 Unsupported Media Type).
V13,API,13.2.1,Verify that enabled RESTful HTTP methods are a valid choice for the user or action; such as preventing normal users using DELETE or PUT on protected API or resources.
V13,API,13.2.2,Verify that JSON schema validation is in place and verified before accepting input.
V13,API,13.2.3,Verify that RESTful web services that utilize cookies are protected from Cross-Site Request Forgery via the use of at least one or more of the following: triple or double submit cookie pattern (see [references](https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet)); CSRF nonces; or ORIGIN request header checks.
V13,API,13.2.4,Verify that REST services have anti-automation controls to protect against excessive calls; especially if the API is unauthenticated.
V13,API,13.2.5,Verify that REST services explicitly check the incoming Content-Type to be the expected one; such as application/xml or application/JSON.
V13,API,13.2.6,Verify that the message headers and payload are trustworthy and not modified in transit. Requiring strong encryption for transport (TLS only) may be sufficient in many cases as it provides both confidentiality and integrity protection. Per-message digital signatures can provide additional assurance on top of the transport protections for high-security applications but bring with them additional complexity and risks to weigh against the benefits.
V13,API,13.3.1,Verify that XSD schema validation takes place to ensure a properly formed XML document; followed by validation of each input field before any processing of that data takes place.
V13,API,13.3.2,Verify that the message payload is signed using WS-Security to ensure reliable transport between client and service.
V14,Config,14.1.1,Verify that the application build and deployment processes are performed in a secure and repeatable way; such as CI / CD automation; automated configuration management; and automated deployment scripts.
V14,Config,14.1.3,Verify that server configuration is hardened as per the recommendations of the application server and frameworks in use.
V14,Config,14.1.4,Verify that the application; configuration; and all dependencies can be re-deployed using automated deployment scripts; built from a documented and tested runbook in a reasonable time; or restored from backups in a timely fashion.
V14,Config,14.1.5,Verify that authorized administrators can verify the integrity of all security-relevant configurations to detect tampering.
V14,Config,14.2.1,Verify that all components are up to date; preferably using a dependency checker during build or compile time. ([C2](https://www.owasp.org/index.php/OWASP_Proactive_Controls#tab=Formal_Numbering))
V14,Config,14.2.2,Verify that all unneeded features; documentation; samples; configurations are removed; such as sample applications; platform documentation; and default or example users.
V14,Config,14.2.3,Verify that if application assets; such as JavaScript libraries; CSS stylesheets or web fonts; are hosted externally on a content delivery network (CDN) or external provider; Subresource Integrity (SRI) is used to validate the integrity of the asset.
V14,Config,14.2.4,Verify that third party components come from pre-defined; trusted and continually maintained repositories. ([C2](https://www.owasp.org/index.php/OWASP_Proactive_Controls#tab=Formal_Numbering))
V14,Config,14.2.5,Verify that an inventory catalog is maintained of all third party libraries in use. ([C2](https://www.owasp.org/index.php/OWASP_Proactive_Controls#tab=Formal_Numbering))
V14,Config,14.2.6,Verify that the attack surface is reduced by sandboxing or encapsulating third party libraries to expose only the required behaviour into the application. ([C2](https://www.owasp.org/index.php/OWASP_Proactive_Controls#tab=Formal_Numbering))
V14,Config,14.3.1,Verify that web or application server and framework error messages are configured to deliver user actionable; customized responses to eliminate any unintended security disclosures.
V14,Config,14.3.2,Verify that web or application server and application framework debug modes are disabled in production to eliminate debug features; developer consoles; and unintended security disclosures.
V14,Config,14.3.3,Verify that the HTTP headers or any part of the HTTP response do not expose detailed version information of system components.
V14,Config,14.4.1,Verify that every HTTP response contains a content type header specifying a safe character set (e.g.; UTF-8; ISO 8859-1).
V14,Config,14.4.2,"Verify that all API responses contain Content-Disposition: attachment; filename=""api.json"" (or other appropriate filename for the content type)."
V14,Config,14.4.3,Verify that a content security policy (CSPv2) is in place that helps mitigate impact for XSS attacks like HTML; DOM; JSON; and JavaScript injection vulnerabilities. *
V14,Config,14.4.4,Verify that all responses contain X-Content-Type-Options: nosniff.
V14,Config,14.4.5,Verify that HTTP Strict Transport Security headers are included on all responses and for all subdomains; such as Strict-Transport-Security: max-age=15724800; includeSubdomains.
V14,Config,14.4.6,"Verify that a suitable ""Referrer-Policy"" header is included; such as ""no-referrer"" or ""same-origin""."
V14,Config,14.4.7,Verify that a suitable X-Frame-Options or Content-Security-Policy: frame-ancestors header is in use for sites where content should not be embedded in a third-party site.
V14,Config,14.5.1,Verify that the application server only accepts the HTTP methods in use by the application or API; including pre-flight OPTIONS.
V14,Config,14.5.2,Verify that the supplied Origin header is not used for authentication or access control decisions; as the Origin header can easily be changed by an attacker.
V14,Config,14.5.3,"Verify that the cross-domain resource sharing (CORS) Access-Control-Allow-Origin header uses a strict white-list of trusted domains to match against and does not support the ""null"" origin."
V14,Config,14.5.4,Verify that HTTP headers added by a trusted proxy or SSO devices; such as a bearer token; are authenticated by the application.
